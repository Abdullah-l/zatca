describe ZATCA::UBL::Invoice do
  def clear_dynamic_values_from_xml(xml)
    xml.gsub(/<ds:DigestValue>.*<\/ds:DigestValue>/, "")
      .gsub(/<ds:SignatureValue>.*<\/ds:SignatureValue>/, "")
      .gsub(/<cbc:EmbeddedDocumentBinaryObject mimeCode="text\/plain">.*<\/cbc:EmbeddedDocumentBinaryObject>/, "")
  end

  context "simplified invoice" do
    it "should generate xml that matches ZATCA's" do
      invoice = construct_simplified_invoice
      zatca_xml = read_xml_fixture("simplified_invoice_signed.xml")

      expect(invoice.generate_xml).to eq(zatca_xml)
    end

    it "should be able to create an unsigned invoice qr-less invoice then add them later" do
      invoice = construct_unsigned_simplified_invoice

      # TODO: Remove these once done testing
      File.write("TEST_ME_WITH_ZATCA_UNSIGNED.xml", invoice.generate_xml(pretty: false))

      # Hash the invoice
      invoice_hash = invoice.generate_hash

      # Expect the hash to match the one generated by ZATCA's SDK
      zatca_invoice_hash = "JqnuZfvJkUonU25aMshBYbkpP3ICzSZxjMSnJ3rhkFs="
      expect(invoice_hash[:base64]).to eq(zatca_invoice_hash)

      # Sign the invoice
      private_key_path = private_key_fixtures_path("private_key.pem")
      certificate_path = certificate_path("certificate.pem")
      signing_time = "2022-09-15T00:41:21Z"

      invoice.sign(
        private_key_path: private_key_path,
        certificate_path: certificate_path,
        signing_time: signing_time,
        decode_private_key_from_base64: true
      )

      # Create a QR Code
      tags = ZATCA::Tags.new({
        seller_name: "Acme Widgets LTD",
        vat_registration_number: "311111111101113",
        timestamp: "2022-08-17T17:41:08Z",
        vat_total: "30.15",
        invoice_total: "231.15",
        xml_invoice_hash: invoice_hash[:base64],
        ecdsa_signature: invoice.signed_hash,
        ecdsa_public_key: invoice.certificate_public_key_bytes,
        ecdsa_stamp_signature: invoice.certificate_signature
      })

      invoice.qr_code = tags.to_base64

      zatca_xml = read_xml_fixture("simplified_invoice_signed.xml")

      generated_xml = invoice.generate_xml(pretty: true)

      # TODO: Remove these once done testing
      File.write("TEST_ME_WITH_ZATCA.xml", generated_xml)
      File.write("TEST_ME_WITH_ZATCA_BASE64.txt", invoice.to_base64)

      # Remove values that can be different  due to timestamps/signing.
      # These values are supposed to have changing values on every run so
      # we cannot test them for identicalitym merely that they are present.
      generated_xml = clear_dynamic_values_from_xml(generated_xml)
      zatca_xml = clear_dynamic_values_from_xml(zatca_xml)

      expect(generated_xml).to eq(zatca_xml)
    end
  end

  context "standard invoice" do
    # There are a few things manually modified in this fixture:
    # 1. ZATCA incorrectly has the signature algorithm set to:
    # <ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/>
    # when in reality it is:
    # <ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256"/>
    #
    # 2. Using short form of value-less/child-less tags for Signature Value
    # In original ZATCA sample it is:
    # <ds:SignatureValue></ds:SignatureValue>
    # In our modified version it is:
    # <ds:SignatureValue/>
    #
    # 3. Inside of TaxCategory for the standard invoice, ZATCA doesn't include the
    # schemeAgencyID or schemeID, but we retain them here as in the simplified
    # invoice
    #
    # ZATCA:
    # <cac:TaxCategory>
    #        <cbc:ID>S</cbc:ID>
    #
    # Our version:
    # <cac:TaxCategory>
    #        <cbc:ID schemeAgencyID="6" schemeID="UN/ECE 5305">S</cbc:ID>
    it "should generate xml that matches ZATCA's" do
      invoice = construct_standard_invoice
      zatca_xml = read_xml_fixture("standard_invoice.xml")

      expect(invoice.generate_xml).to eq(zatca_xml)
    end
  end
end
